注意：通配符和正则表达式是不一样的，因此，代表的意义也是有较大区别的，
通配符一般用户命令行bash环境，而linux正则表达式用于grep，sed，awk场景

* - 通配符，代表任意（0到多个）字符**
？- 通配符，代表任意一个字符
； - 连续不同命令的分隔符**
#- 配置文件注释**
| - 管道**
~ - 用户的家目录**
- - 上次的目录**
$- 变量前需要加的符号
/ - 路径分隔符号
> 或1> - 重定向，覆盖**
>> - 追加重定向，追加**
< - 输入重定向**
<< - 追加输入重定向
' - 单引号，不具有变量置换功能，输出时所见即所得
" - 双引号，具有变量置换功能，解析变量后输出
` - tab键上面的键，反引号，两个``中间为命令，会先止血，等价$()
{} - 中间为命令区块组合或内容序列
！ - 逻辑运算中的“非”
&& - 当前一个指令执行成功时，执行后一个指令
||  -  当前一个指令执行失败时，执行后一个指令
.. 上一级目录
. 当前目录

最常用的通配符，举例：
1，*号举例
#ls -l *.sh
    b.sh
    test.sh

#ls -l ?.sh
     b.sh

#ls -l ????.sh
    test.sh

#touch log.{1..3}
log.1 log.2 lof.3


#echo "`pwd`"
/test/oldboy
#echo "`date` $a"
2015年 05月 28日 星期四 21:16:19 CST oldboy
#echo '`date` $a'
`date` $a







